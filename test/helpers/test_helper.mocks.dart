// Mocks generated by Mockito 5.2.0 from annotations
// in desafio_supremo/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:convert' as _i18;
import 'dart:typed_data' as _i19;

import 'package:desafio_supremo/core/error/failure.dart' as _i8;
import 'package:desafio_supremo/data/datasources/balance_remote_data_source.dart'
    as _i14;
import 'package:desafio_supremo/data/datasources/detail_remote_data_source.dart'
    as _i15;
import 'package:desafio_supremo/data/datasources/statement_remote_data_source.dart'
    as _i16;
import 'package:desafio_supremo/data/models/balance_model.dart' as _i3;
import 'package:desafio_supremo/data/models/detail_model.dart' as _i4;
import 'package:desafio_supremo/data/models/statement_model.dart' as _i17;
import 'package:desafio_supremo/domain/entities/balance.dart' as _i9;
import 'package:desafio_supremo/domain/entities/detail.dart' as _i13;
import 'package:desafio_supremo/domain/entities/statement.dart' as _i11;
import 'package:desafio_supremo/domain/repositories/balance_repository.dart'
    as _i6;
import 'package:desafio_supremo/domain/repositories/detail_repository.dart'
    as _i12;
import 'package:desafio_supremo/domain/repositories/statement_repository.dart'
    as _i10;
import 'package:either_dart/either.dart' as _i2;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeBalanceModel_1 extends _i1.Fake implements _i3.BalanceModel {}

class _FakeDetailModel_2 extends _i1.Fake implements _i4.DetailModel {}

class _FakeResponse_3 extends _i1.Fake implements _i5.Response {}

class _FakeStreamedResponse_4 extends _i1.Fake implements _i5.StreamedResponse {
}

/// A class which mocks [BalanceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBalanceRepository extends _i1.Mock implements _i6.BalanceRepository {
  MockBalanceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i9.Balance>> getBalance() =>
      (super.noSuchMethod(Invocation.method(#getBalance, []),
              returnValue: Future<_i2.Either<_i8.Failure, _i9.Balance>>.value(
                  _FakeEither_0<_i8.Failure, _i9.Balance>()))
          as _i7.Future<_i2.Either<_i8.Failure, _i9.Balance>>);
}

/// A class which mocks [StatementRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStatementRepository extends _i1.Mock
    implements _i10.StatementRepository {
  MockStatementRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i11.Statement>>> getStatement(
          String? limit, String? offset) =>
      (super.noSuchMethod(Invocation.method(#getStatement, [limit, offset]),
              returnValue:
                  Future<_i2.Either<_i8.Failure, List<_i11.Statement>>>.value(
                      _FakeEither_0<_i8.Failure, List<_i11.Statement>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i11.Statement>>>);
}

/// A class which mocks [DetailRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailRepository extends _i1.Mock implements _i12.DetailRepository {
  MockDetailRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i13.Detail>> getDetail(String? id) =>
      (super.noSuchMethod(Invocation.method(#getDetail, [id]),
              returnValue: Future<_i2.Either<_i8.Failure, _i13.Detail>>.value(
                  _FakeEither_0<_i8.Failure, _i13.Detail>()))
          as _i7.Future<_i2.Either<_i8.Failure, _i13.Detail>>);
}

/// A class which mocks [BalanceRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBalanceRemoteDataSource extends _i1.Mock
    implements _i14.BalanceRemoteDataSource {
  MockBalanceRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.BalanceModel> getBalance() => (super.noSuchMethod(
          Invocation.method(#getBalance, []),
          returnValue: Future<_i3.BalanceModel>.value(_FakeBalanceModel_1()))
      as _i7.Future<_i3.BalanceModel>);
}

/// A class which mocks [DetailRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailRemoteDataSource extends _i1.Mock
    implements _i15.DetailRemoteDataSource {
  MockDetailRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.DetailModel> getDetail(String? id) =>
      (super.noSuchMethod(Invocation.method(#getDetail, [id]),
              returnValue: Future<_i4.DetailModel>.value(_FakeDetailModel_2()))
          as _i7.Future<_i4.DetailModel>);
}

/// A class which mocks [StatementRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockStatementRemoteDataSource extends _i1.Mock
    implements _i16.StatementRemoteDataSource {
  MockStatementRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i17.StatementModel>> getStatement(
          String? limit, String? offset) =>
      (super.noSuchMethod(Invocation.method(#getStatement, [limit, offset]),
              returnValue: Future<List<_i17.StatementModel>>.value(
                  <_i17.StatementModel>[]))
          as _i7.Future<List<_i17.StatementModel>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i18.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i18.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i18.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i18.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_3()))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<_i19.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i19.Uint8List>.value(_i19.Uint8List(0)))
          as _i7.Future<_i19.Uint8List>);
  @override
  _i7.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_4()))
          as _i7.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
